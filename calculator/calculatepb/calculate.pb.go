// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculate.proto

package calculatepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Calculate struct {
	FirstNumber          int64    `protobuf:"varint,1,opt,name=first_number,json=firstNumber,proto3" json:"first_number,omitempty"`
	SecondNumber         int64    `protobuf:"varint,2,opt,name=second_number,json=secondNumber,proto3" json:"second_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Calculate) Reset()         { *m = Calculate{} }
func (m *Calculate) String() string { return proto.CompactTextString(m) }
func (*Calculate) ProtoMessage()    {}
func (*Calculate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{0}
}

func (m *Calculate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Calculate.Unmarshal(m, b)
}
func (m *Calculate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Calculate.Marshal(b, m, deterministic)
}
func (m *Calculate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Calculate.Merge(m, src)
}
func (m *Calculate) XXX_Size() int {
	return xxx_messageInfo_Calculate.Size(m)
}
func (m *Calculate) XXX_DiscardUnknown() {
	xxx_messageInfo_Calculate.DiscardUnknown(m)
}

var xxx_messageInfo_Calculate proto.InternalMessageInfo

func (m *Calculate) GetFirstNumber() int64 {
	if m != nil {
		return m.FirstNumber
	}
	return 0
}

func (m *Calculate) GetSecondNumber() int64 {
	if m != nil {
		return m.SecondNumber
	}
	return 0
}

type CalculateRequest struct {
	Calculate            *Calculate `protobuf:"bytes,1,opt,name=calculate,proto3" json:"calculate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CalculateRequest) Reset()         { *m = CalculateRequest{} }
func (m *CalculateRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateRequest) ProtoMessage()    {}
func (*CalculateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{1}
}

func (m *CalculateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateRequest.Unmarshal(m, b)
}
func (m *CalculateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateRequest.Marshal(b, m, deterministic)
}
func (m *CalculateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateRequest.Merge(m, src)
}
func (m *CalculateRequest) XXX_Size() int {
	return xxx_messageInfo_CalculateRequest.Size(m)
}
func (m *CalculateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateRequest proto.InternalMessageInfo

func (m *CalculateRequest) GetCalculate() *Calculate {
	if m != nil {
		return m.Calculate
	}
	return nil
}

type CalculateResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateResponse) Reset()         { *m = CalculateResponse{} }
func (m *CalculateResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateResponse) ProtoMessage()    {}
func (*CalculateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{2}
}

func (m *CalculateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateResponse.Unmarshal(m, b)
}
func (m *CalculateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateResponse.Marshal(b, m, deterministic)
}
func (m *CalculateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateResponse.Merge(m, src)
}
func (m *CalculateResponse) XXX_Size() int {
	return xxx_messageInfo_CalculateResponse.Size(m)
}
func (m *CalculateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateResponse proto.InternalMessageInfo

func (m *CalculateResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PrimeNumber struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumber) Reset()         { *m = PrimeNumber{} }
func (m *PrimeNumber) String() string { return proto.CompactTextString(m) }
func (*PrimeNumber) ProtoMessage()    {}
func (*PrimeNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{3}
}

func (m *PrimeNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumber.Unmarshal(m, b)
}
func (m *PrimeNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumber.Marshal(b, m, deterministic)
}
func (m *PrimeNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumber.Merge(m, src)
}
func (m *PrimeNumber) XXX_Size() int {
	return xxx_messageInfo_PrimeNumber.Size(m)
}
func (m *PrimeNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumber.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumber proto.InternalMessageInfo

func (m *PrimeNumber) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberRequest struct {
	Primenumber          *PrimeNumber `protobuf:"bytes,1,opt,name=primenumber,proto3" json:"primenumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PrimeNumberRequest) Reset()         { *m = PrimeNumberRequest{} }
func (m *PrimeNumberRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberRequest) ProtoMessage()    {}
func (*PrimeNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{4}
}

func (m *PrimeNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberRequest.Unmarshal(m, b)
}
func (m *PrimeNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberRequest.Marshal(b, m, deterministic)
}
func (m *PrimeNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberRequest.Merge(m, src)
}
func (m *PrimeNumberRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberRequest.Size(m)
}
func (m *PrimeNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberRequest proto.InternalMessageInfo

func (m *PrimeNumberRequest) GetPrimenumber() *PrimeNumber {
	if m != nil {
		return m.Primenumber
	}
	return nil
}

type PrimeNumberResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberResponse) Reset()         { *m = PrimeNumberResponse{} }
func (m *PrimeNumberResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberResponse) ProtoMessage()    {}
func (*PrimeNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8b31321fcad8b1, []int{5}
}

func (m *PrimeNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberResponse.Unmarshal(m, b)
}
func (m *PrimeNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberResponse.Marshal(b, m, deterministic)
}
func (m *PrimeNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberResponse.Merge(m, src)
}
func (m *PrimeNumberResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberResponse.Size(m)
}
func (m *PrimeNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberResponse proto.InternalMessageInfo

func (m *PrimeNumberResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*Calculate)(nil), "calculate.Calculate")
	proto.RegisterType((*CalculateRequest)(nil), "calculate.CalculateRequest")
	proto.RegisterType((*CalculateResponse)(nil), "calculate.CalculateResponse")
	proto.RegisterType((*PrimeNumber)(nil), "calculate.PrimeNumber")
	proto.RegisterType((*PrimeNumberRequest)(nil), "calculate.PrimeNumberRequest")
	proto.RegisterType((*PrimeNumberResponse)(nil), "calculate.PrimeNumberResponse")
}

func init() {
	proto.RegisterFile("calculate.proto", fileDescriptor_1d8b31321fcad8b1)
}

var fileDescriptor_1d8b31321fcad8b1 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcb, 0x4b, 0xc3, 0x40,
	0x10, 0xc6, 0xad, 0x85, 0x42, 0x67, 0x5b, 0xd4, 0xb5, 0x04, 0xf1, 0x85, 0xae, 0x08, 0x82, 0x58,
	0x24, 0x5e, 0x3c, 0x6b, 0xf1, 0x22, 0x96, 0xda, 0x9e, 0xf4, 0x22, 0xc9, 0x3a, 0xc2, 0x42, 0x92,
	0x5d, 0xf7, 0x51, 0xf0, 0xcf, 0xf2, 0x3f, 0x14, 0xf3, 0xdc, 0x42, 0xeb, 0xa5, 0x1e, 0xe7, 0xdb,
	0x6f, 0x7e, 0xf3, 0x65, 0x86, 0xc0, 0x16, 0x8f, 0x12, 0xee, 0x92, 0xc8, 0xe2, 0x50, 0x69, 0x69,
	0x25, 0xed, 0xd6, 0x02, 0x9b, 0x41, 0xf7, 0xbe, 0x2a, 0xe8, 0x29, 0xf4, 0x3e, 0x84, 0x36, 0xf6,
	0x2d, 0x73, 0x69, 0x8c, 0x7a, 0xaf, 0x75, 0xd2, 0xba, 0x68, 0x4f, 0x49, 0xae, 0x8d, 0x73, 0x89,
	0x9e, 0x41, 0xdf, 0x20, 0x97, 0xd9, 0x7b, 0xe5, 0xd9, 0xcc, 0x3d, 0xbd, 0x42, 0x2c, 0x4c, 0xec,
	0x01, 0xb6, 0x6b, 0xe8, 0x14, 0x3f, 0x1d, 0x1a, 0x4b, 0x43, 0x68, 0xa6, 0xe6, 0x60, 0x12, 0x0e,
	0x86, 0x4d, 0xb0, 0xc6, 0xef, 0x85, 0xbb, 0x84, 0x1d, 0x8f, 0x63, 0x94, 0xcc, 0x0c, 0xd2, 0x00,
	0x3a, 0x1a, 0x8d, 0x4b, 0x6c, 0x19, 0xaf, 0xac, 0xd8, 0x39, 0x90, 0x89, 0x16, 0x29, 0x96, 0x41,
	0x03, 0xe8, 0x2c, 0x7c, 0x45, 0x59, 0xb1, 0x31, 0x50, 0xcf, 0x56, 0xa5, 0xbb, 0x05, 0xa2, 0x7e,
	0x55, 0xaf, 0x85, 0x84, 0x81, 0x97, 0xcf, 0xef, 0xf1, 0xad, 0xec, 0x0a, 0x76, 0x17, 0x78, 0x7f,
	0xa7, 0x0c, 0xbf, 0xdb, 0xde, 0x6e, 0x66, 0xa8, 0xe7, 0x82, 0x23, 0x7d, 0x84, 0x5e, 0xa3, 0xb9,
	0x94, 0x1e, 0x2c, 0x5d, 0x4c, 0x11, 0x75, 0xff, 0x70, 0xf9, 0x63, 0x31, 0x97, 0x6d, 0xd0, 0x67,
	0xa0, 0x1e, 0x2c, 0x36, 0x56, 0x47, 0xdc, 0xae, 0x87, 0x9c, 0x78, 0x77, 0x78, 0x72, 0x89, 0x15,
	0x2a, 0xf9, 0xfa, 0x3f, 0xe2, 0x48, 0xcc, 0x85, 0x11, 0x32, 0x5b, 0x8f, 0xf8, 0x02, 0x03, 0xef,
	0x0e, 0x23, 0xe4, 0x32, 0x55, 0xd2, 0x20, 0x3d, 0x5a, 0x71, 0xc4, 0x12, 0x7b, 0xbc, 0xea, 0xb9,
	0x02, 0x5f, 0xb7, 0xee, 0xfa, 0xaf, 0xa4, 0x36, 0xa9, 0x38, 0xee, 0xe4, 0x3f, 0xd1, 0xcd, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x2b, 0xc8, 0xcf, 0x57, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculateServiceClient is the client API for CalculateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateServiceClient interface {
	// Unary
	CalculateSum(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	CalculateSubstract(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	CalculateMultiply(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	CalculateDivision(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	// ServerStream
	PrimeNumberDecompose(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculateService_PrimeNumberDecomposeClient, error)
}

type calculateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateServiceClient(cc grpc.ClientConnInterface) CalculateServiceClient {
	return &calculateServiceClient{cc}
}

func (c *calculateServiceClient) CalculateSum(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/calculate.CalculateService/CalculateSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateServiceClient) CalculateSubstract(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/calculate.CalculateService/CalculateSubstract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateServiceClient) CalculateMultiply(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/calculate.CalculateService/CalculateMultiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateServiceClient) CalculateDivision(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/calculate.CalculateService/CalculateDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateServiceClient) PrimeNumberDecompose(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculateService_PrimeNumberDecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculateService_serviceDesc.Streams[0], "/calculate.CalculateService/PrimeNumberDecompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateServicePrimeNumberDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculateService_PrimeNumberDecomposeClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type calculateServicePrimeNumberDecomposeClient struct {
	grpc.ClientStream
}

func (x *calculateServicePrimeNumberDecomposeClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateServiceServer is the server API for CalculateService service.
type CalculateServiceServer interface {
	// Unary
	CalculateSum(context.Context, *CalculateRequest) (*CalculateResponse, error)
	CalculateSubstract(context.Context, *CalculateRequest) (*CalculateResponse, error)
	CalculateMultiply(context.Context, *CalculateRequest) (*CalculateResponse, error)
	CalculateDivision(context.Context, *CalculateRequest) (*CalculateResponse, error)
	// ServerStream
	PrimeNumberDecompose(*PrimeNumberRequest, CalculateService_PrimeNumberDecomposeServer) error
}

// UnimplementedCalculateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateServiceServer struct {
}

func (*UnimplementedCalculateServiceServer) CalculateSum(ctx context.Context, req *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSum not implemented")
}
func (*UnimplementedCalculateServiceServer) CalculateSubstract(ctx context.Context, req *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSubstract not implemented")
}
func (*UnimplementedCalculateServiceServer) CalculateMultiply(ctx context.Context, req *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMultiply not implemented")
}
func (*UnimplementedCalculateServiceServer) CalculateDivision(ctx context.Context, req *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDivision not implemented")
}
func (*UnimplementedCalculateServiceServer) PrimeNumberDecompose(req *PrimeNumberRequest, srv CalculateService_PrimeNumberDecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecompose not implemented")
}

func RegisterCalculateServiceServer(s *grpc.Server, srv CalculateServiceServer) {
	s.RegisterService(&_CalculateService_serviceDesc, srv)
}

func _CalculateService_CalculateSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServiceServer).CalculateSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.CalculateService/CalculateSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServiceServer).CalculateSum(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateService_CalculateSubstract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServiceServer).CalculateSubstract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.CalculateService/CalculateSubstract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServiceServer).CalculateSubstract(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateService_CalculateMultiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServiceServer).CalculateMultiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.CalculateService/CalculateMultiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServiceServer).CalculateMultiply(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateService_CalculateDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServiceServer).CalculateDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.CalculateService/CalculateDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServiceServer).CalculateDivision(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateService_PrimeNumberDecompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculateServiceServer).PrimeNumberDecompose(m, &calculateServicePrimeNumberDecomposeServer{stream})
}

type CalculateService_PrimeNumberDecomposeServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type calculateServicePrimeNumberDecomposeServer struct {
	grpc.ServerStream
}

func (x *calculateServicePrimeNumberDecomposeServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CalculateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculate.CalculateService",
	HandlerType: (*CalculateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateSum",
			Handler:    _CalculateService_CalculateSum_Handler,
		},
		{
			MethodName: "CalculateSubstract",
			Handler:    _CalculateService_CalculateSubstract_Handler,
		},
		{
			MethodName: "CalculateMultiply",
			Handler:    _CalculateService_CalculateMultiply_Handler,
		},
		{
			MethodName: "CalculateDivision",
			Handler:    _CalculateService_CalculateDivision_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecompose",
			Handler:       _CalculateService_PrimeNumberDecompose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculate.proto",
}
